create table student (
    studentid number GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fname varchar2(50 byte),
    lname varchar2(50 byte),
    dateofbirth date
);


create table role (
    roleid number GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rolename varchar2(50 byte)
);


create table user_login (
    loginid number generated by default as identity primary key,
    username varchar2(200 byte) unique,
    passwordd varchar2(50 byte),
    roleid number,
    studentid number,
    constraint fk_role_id foreign key (roleid) references role(roleid) on delete set null,
    constraint fk_student_id foreign key (studentid) references student (studentid) on delete set null  
);

create table category (
    categoryid number GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    categoryname varchar2(50 byte)
);



create table course(
    courseid number GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    coursename varchar2(50 byte),
    imagename varchar2(100 byte),
    categoryid number,
    constraint fk_category_id foreign key (categoryid) references category(categoryid)on delete set null
);




create table stdcourse(
    id number GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    markofstd number,
    dateofregister date,
    courseid number,
    studentid number,
    constraint fk_course_id foreign key (courseid) references course(courseid)on delete set null,
    constraint fk_std_id foreign key (studentid) references student (studentid) on delete set null  

);


insert into student (studentid, fname, lname, dateofbirth)values (default, 'omar', 'shuqairi', to_date('2000-01-15', 'YYYY-MM-DD'));
insert into student (studentid, fname, lname, dateofbirth)values (default, 'khaled', 'shuqairi', to_date('2001-05-22', 'YYYY-MM-DD'));
insert into student (studentid, fname, lname, dateofbirth)values (default, 'salah', 'shuqairi', to_date('1999-09-10', 'YYYY-MM-DD'));

insert into role (roleid, rolename) values (default, 'Admin');
insert into role (roleid, rolename) values (default, 'Instructor');
insert into role (roleid, rolename) values (default, 'Student');

insert into user_login (loginid, username, passwordd, roleid, studentid)values (default, 'omarsh', '123', 1, 1);
insert into user_login (loginid, username, passwordd, roleid, studentid)values (default, 'khaledsh', '456', 2, 2);
insert into user_login (loginid, username, passwordd, roleid, studentid)values (default, 'salahsh', '789', 3, 3);

insert into category (categoryid, categoryname) values (default, 'Mathematics');
insert into category (categoryid, categoryname) values (default, 'Science');
insert into category (categoryid, categoryname) values (default, 'Programming');

insert into course (courseid, coursename, imagename, categoryid) values (default, 'Algebra', 'algebra.jpg', 1);
insert into course (courseid, coursename, imagename, categoryid) values (default, 'Physics', 'physics.jpg', 2);
insert into course (courseid, coursename, imagename, categoryid) values (default, 'C# Programming', 'csharp.jpg', 3);

insert into stdcourse (id, markofstd, dateofregister, courseid, studentid)values (default, 85, to_date('2024-01-10', 'YYYY-MM-DD'), 1, 3);
insert into stdcourse (id, markofstd, dateofregister, courseid, studentid)values (default, 90, to_date('2024-01-12', 'YYYY-MM-DD'), 2, 3);
insert into stdcourse (id, markofstd, dateofregister, courseid, studentid)values (default, 88, to_date('2024-01-15', 'YYYY-MM-DD'), 3, 3);

COMMIT;





create or replace package Course_package
AS
procedure GetAllCourses;
procedure CreateCourse(course_name in course.coursename%type,img in course.imagename%type, catId in course.categoryid%type);
procedure UpdateCourse(id in course.courseid%type, course_name in course.coursename%type,
img in course.imagename%type, catId in course.categoryid%type);
procedure DeleteCourse(id in course.courseid%type);
procedure GetCourseById(id in course.courseid%type);
End;

create or replace package body Course_package
As
procedure GetAllCourses
AS
cur_all SYS_REFCURSOR;
begin
open cur_all for
SELECT*from course;
Dbms_sql.return_result(cur_all);
end GetAllCourses;

procedure CreateCourse(course_name in course.coursename%type,img in course.imagename%type,
catId in course.categoryid%type)
AS
BEGIN
INSERT INTO course (courseid,coursename, categoryid, imagename)VALUES (default,course_name, catId, img);
COMMIT;
END CreateCourse;

procedure UpdateCourse(id in course.courseid%type, course_name in course.coursename%type,
img in course.imagename%type, catId in course.categoryid%type)
as
begin
update course 
set 
coursename=course_name,
categoryid=catId,
imagename = img
where 
courseid=id;
commit;
end UpdateCourse;

procedure DeleteCourse(id in course.courseid%type)
as
begin
delete from course 
where courseid=id;
commit;
end DeleteCourse;

procedure GetCourseById(id in course.courseid%type)
as
cur_item SYS_REFCURSOR;
begin 
open cur_item for select *from course where courseid = id;
Dbms_sql.return_result(cur_item);
end GetCourseById;
end Course_package;

create or replace package Student_package
AS
procedure getallstudents;
procedure getstudentbyid(id in student.studentid%type);
procedure createstudent(firstname in student.fname%type, lastname in student.lname%type,
dob in student.dateofbirth%type);
procedure updatestudent(id in student.studentid%type, firstname in student.fname%type,
lastname in student.lname%type, dob in student.dateofbirth%type);
procedure deletestudent(id in student.studentid%type);
procedure getstudentsfullname;
procedure getstudentbyfirstname(f_name in student.fname%type);
procedure getstudentbybirthdate(dob in student.dateofbirth%type);
procedure getstudentsbybirthdaterange(startdate in date, enddate in date);
End;

create or replace package body student_package
as
procedure getallstudents
as
cur_all sys_refcursor;
begin
open cur_all for select * from student;
dbms_sql.return_result(cur_all);
end getallstudents;

procedure getstudentbyid(id in student.studentid%type)
as
cur_item sys_refcursor;
begin
open cur_item for select * from student where studentid = id;
dbms_sql.return_result(cur_item);
end getstudentbyid;

procedure createstudent(firstname in student.fname%type, lastname in student.lname%type, dob in student.dateofbirth%type)
as
begin
insert into student (studentid,fname, lname, dateofbirth) values (default,firstname, lastname, dob);
commit;
end createstudent;

procedure updatestudent(id in student.studentid%type, firstname in student.fname%type,
lastname in student.lname%type, dob in student.dateofbirth%type)
as
begin
update student 
set fname = firstname,
lname = lastname,
dateofbirth = dob 
where studentid = id;
commit;
end updatestudent;

procedure deletestudent(id in student.studentid%type)
as
begin
delete from student where studentid = id;
commit;
end deletestudent;

procedure getstudentsfullname as
cur_all sys_refcursor;
begin
open cur_all for select fname || ' ' || lname as FullName from student;
dbms_sql.return_result(cur_all);
end getstudentsfullname;

procedure getstudentbyfirstname(f_name in student.fname%type) as
cur_item sys_refcursor;
begin
open cur_item for select * from student
where fname = f_name;
dbms_sql.return_result(cur_item);
end getstudentbyfirstname;

procedure getstudentbybirthdate(dob in student.dateofbirth%type)
as
cur_item sys_refcursor;
begin
open cur_item for select * from student
where dateofbirth = dob;
dbms_sql.return_result(cur_item);
end getstudentbybirthdate;

procedure getstudentsbybirthdaterange(startdate in date, enddate in date)
as
cur_all sys_refcursor;
begin
open cur_all for 
select * from student 
where dateofbirth between startdate and enddate; 
dbms_sql.return_result(cur_all);
end getstudentsbybirthdaterange;
end student_package;

create or replace package Category_package
AS
procedure getallcategories;
procedure getcategorybyid(id in category.categoryid%type);
procedure createcategory(category_name in category.categoryname%type);
procedure updatecategory(id in category.categoryid%type, category_name in category.categoryname%type);
procedure deletecategory(id in category.categoryid%type);
procedure getallcategorycourse;
End;

create or replace package body Category_package
as
procedure getallcategories
as
cur_all sys_refcursor;
begin
open cur_all for select * from category;
dbms_sql.return_result(cur_all);
end getallcategories;

procedure getcategorybyid(id in category.categoryid%type)
as
cur_item sys_refcursor;
begin
open cur_item for select * from category where categoryid = id;
dbms_sql.return_result(cur_item);
end getcategorybyid;

procedure createcategory(category_name in category.categoryname%type)
as
begin
insert into category (categoryid,categoryname) values (default,category_name);
commit;
end createcategory;

procedure updatecategory(id in category.categoryid%type, category_name in category.categoryname%type)
as
begin
update category 
set categoryname = category_name 
where categoryid = id;
commit;
end updatecategory;

procedure deletecategory(id in category.categoryid%type)
as
begin
delete from category where categoryid = id;
commit;
end deletecategory;


procedure getallcategorycourse
as
cur_all SYS_REFCURSOR;
begin 
open cur_all for
select cat.categoryid , cat.categoryname , c.courseid, c.coursename
from course c
inner join category cat
on c.categoryid = cat.categoryid;
dbms_sql.return_result(cur_all);
end getallcategorycourse;
end Category_package;

create or replace package role_package
AS
procedure getallroles;
procedure getrolebyid(id in role.roleid%type);
procedure createrole(role_name in role.rolename%type);
procedure updaterole(id in role.roleid%type, role_name in role.rolename%type);
procedure deleterole(id in role.roleid%type);
End;

create or replace package body role_package
as

procedure getallroles
as
cur_all sys_refcursor;
begin
open cur_all for select * from role;
dbms_sql.return_result(cur_all);
end getallroles;

procedure getrolebyid(id in role.roleid%type)
as
cur_item sys_refcursor;
begin
open cur_item for select * from role where roleid = id;
dbms_sql.return_result(cur_item);
end getrolebyid;

procedure createrole(role_name in role.rolename%type)
as
begin
insert into role (roleid,rolename) values (default,role_name);
commit;
end createrole;

procedure updaterole(id in role.roleid%type, role_name in role.rolename%type)
as
begin
update role 
set rolename = role_name 
where roleid = id;
commit;
end updaterole;

procedure deleterole(id in role.roleid%type)
as
begin
delete from role where roleid = id;
commit;
end deleterole;
end role_package;

create or replace package userlogin_package
AS
procedure getallusers;
procedure getuserbyid(id in user_login.loginid%type);
procedure createuser(user_name in user_login.username%type, pass_word in user_login.passwordd%type,
role_id in user_login.roleid%type, student_id in user_login.studentid%type);
procedure updateuser(id in user_login.loginid%type, user_name in user_login.username%type,
pass_word in user_login.passwordd%type, role_id in user_login.roleid%type, student_id in user_login.studentid%type);
procedure deleteuser(id in user_login.loginid%type);
End;

create or replace package body userlogin_package
as
procedure getallusers
as
cur_all sys_refcursor;
begin
open cur_all for select * from user_login;
dbms_sql.return_result(cur_all);
end getallusers;

procedure getuserbyid(id in user_login.loginid%type)
as
cur_item sys_refcursor;
begin
open cur_item for select * from user_login where loginid = id;
dbms_sql.return_result(cur_item);
end getuserbyid;

procedure createuser(user_name in user_login.username%type, pass_word in user_login.passwordd%type,
role_id in user_login.roleid%type, student_id in user_login.studentid%type)
as
begin
insert into user_login (loginid,username, passwordd, roleid, studentid)
values (default,user_name, pass_word, role_id, student_id);
commit;
end createuser;

procedure updateuser(id in user_login.loginid%type, user_name in user_login.username%type,
pass_word in user_login.passwordd%type, role_id in user_login.roleid%type, student_id in user_login.studentid%type)
as
begin
update user_login 
set 
username = user_name,
passwordd = pass_word,
roleid = role_id,
studentid = student_id
where loginid = id;
commit;
end updateuser;

procedure deleteuser(id in user_login.loginid%type)
as
begin
delete from user_login where loginid = id;
commit;
end deleteuser;
end userlogin_package;

create or replace package StdCourse_package
AS
procedure getallstdcourse;
procedure getstdcoursebyid(StdCourseId in stdcourse.id%type);
procedure createstdcourse(markstd in stdcourse.markofstd%type, registerdate in stdcourse.dateofregister%type,
course_id in stdcourse.courseid%type, student_id in stdcourse.studentid%type);
procedure updatestdcourse(StdCourseId in stdcourse.id%type, markstd in stdcourse.markofstd%type,
registerdate in stdcourse.dateofregister%type, course_id in stdcourse.courseid%type, student_id in stdcourse.studentid%type);
procedure deletestdcourse(StdCourseId in stdcourse.id%type);
PROCEDURE TotalStudentInEachCourse;
procedure SearchCourseStudent(StdName in varchar , cName in varchar , Datefrom in date , dateto in date );
End;

create or replace package body StdCourse_package
as
procedure getallstdcourse
as
cur_all sys_refcursor;
begin
open cur_all for select * from stdcourse;
dbms_sql.return_result(cur_all);
end getallstdcourse;

procedure getstdcoursebyid(StdCourseId in stdcourse.id%type)
as
cur_item sys_refcursor;
begin
open cur_item for select * from stdcourse where id = StdCourseId;
dbms_sql.return_result(cur_item);
end getstdcoursebyid;

procedure createstdcourse(markstd in stdcourse.markofstd%type, registerdate in stdcourse.dateofregister%type,
course_id in stdcourse.courseid%type, student_id in stdcourse.studentid%type)
as
begin
insert into stdcourse (id,markofstd, dateofregister, courseid, studentid)
values (default,markstd, registerdate, course_id, student_id);
commit;
end createstdcourse;

procedure updatestdcourse(StdCourseId in stdcourse.id%type, markstd in stdcourse.markofstd%type, 
registerdate in stdcourse.dateofregister%type, course_id in stdcourse.courseid%type,
student_id in stdcourse.studentid%type)
as
begin
update stdcourse 
set 
markofstd = markstd,
dateofregister = registerdate,
courseid = course_id,
studentid = student_id
where id =stdcourseid ;
commit;
end updatestdcourse;

procedure deletestdcourse(StdCourseId in stdcourse.id%type)
as
begin
delete from stdcourse where id = stdcourseid;
commit;
end deletestdcourse;

PROCEDURE TotalStudentInEachCourse
As
C_all SYS_REFCURSOR ;
Begin
open C_all for 
select c.coursename , count(s.studentid) as StudentCount
from stdcourse sc 
full outer join student s 
on s.studentid = sc.studentid
full outer join course c 
on c.courseid = sc.courseid
group by c.coursename ;
Dbms_sql.return_result(c_all);
End TotalStudentInEachCourse ;

procedure SearchCourseStudent(StdName in varchar , cName in varchar , Datefrom in date , dateto in date )
as 
C_all SYS_REFCURSOR ;
begin 
open C_all for select std.fname , std.lname , c.coursename , sdtc.markofstd 
from student std 
inner join stdcourse sdtc 
on std.studentid = sdtc.studentid 
inner join course c
on sdtc.courseid = c.courseid 
where (upper(std.fname) like '%'|| upper(StdName)||'%')
and (upper(c.coursename) like '%'||upper(cName)||'%')
and ( sdtc.dateofregister BETWEEN Datefrom and dateto OR datefrom is  null or dateto is null ) ;
Dbms_sql.return_result(c_all);
 
end SearchCourseStudent;

end StdCourse_package;



create or replace package Login_package
AS
procedure User_Login(user_name in VARCHAR,pass_word in VARCHAR);

End;

create or replace package body Login_package
as
procedure User_Login(user_name in VARCHAR,pass_word in VARCHAR)
as
c_all SYS_REFCURSOR;
begin
open c_all for select username , roleid from user_login where username = user_name and passwordd= pass_word;
Dbms_sql.return_result(c_all);
end User_Login;
end Login_package;












